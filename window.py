import os
import time
import shutil
import base64
import pysftp
import pystray
import threading
import configparser
from PIL import Image
from pystray import MenuItem as item
from win10toast import ToastNotifier
from check_process import check_for_new_version, check_if_game_is_running, check_for_new_save
from tkinter import DISABLED, END, INSERT, NORMAL, Entry, Label, Menu, Toplevel, filedialog, Button, Text, Frame, Tk

def GuuFileSync():
    config = configparser.ConfigParser()
    config_path = '%s\\.guufilesync\\' %  os.environ['LOCALAPPDATA']
    toaster = ToastNotifier()
    guu_version = '1.0.1'
    folder_location = None
    
    def check_and_create_system_files():
            nonlocal folder_location
            if not os.path.exists(config_path):
                os.makedirs(config_path)
            if not os.path.isdir(f'{config_path}\\tmp\\'):
                os.mkdir(f'{config_path}\\tmp\\')
            if not os.path.isfile(f'{config_path}\\icon.ico'):
                ##The Base64 icon version as a string
                ## Create Icon from Base64 Data
                icon = \
                    """ 
                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wAA/8AAAAP/AAD/wAAAA/8AAP/gAAAD/wAA/+AAAAP/AAD/4AAAA/8AAP/gAAAD/wAA//AAAAf/AAD/8AAAB/8AAP/4AAAP/wAA//gAAB//AAD//AAAH/8AAP/+AAA//wAA//+AAP//AAD//8AB//8AAP//+A///wAA////////AAD///////8AAP///////wAA////////AAD///////8AAP///////wAA////////AACJUE5HDQoaCgAAAA1JSERSAAABAAAAAQAIBgAAAFxyqGYAADQSSURBVHja7Z15nFxVmfd/z7n31tp7p7vTWTor2WMSQiAsgoDIOOPoyDijjjoqysyIy+DC4IsbgzOKqGNEEZdRdEZBZdTBZQZHBRRkhwAhZCV70ulOeq/qWu4953n/uLeqq7NWOumu6qrny6dC0l1165x7z3nOc57zLIAgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgVDJU6gYI4we7DNigR/b8zn64+9ehvemtYTtkOzU19RHLtqNQ7BjWljGGwIBSihVsrYxyPe1lhtL96Uwqm21xpmXXTrks8+pZf+WiB4w2gEiGTiUgT7EC2L5zDxQc+lHvbXEdG2r2lNvcO9A92yVvuopQO0G1sItWT2dbGRyDQhQKESa2ASgABDABYDKWJpDHjCyDM2QoqSzVQw4OEFEPu+iystbO2ljdXsd2Dule6rmg/pXDtz/2L/pX73peBMMkQ57WJISZQdcRfvDhdc6Ons3t3dnuixDl5cbVyzzm+WyZRjZeLUARBisEk1Ix5584A8GcPwICGDRqYDAMEHyUQIaBtCJKKGP3gXgnhbzNlLTX16jGJ6fWT9t53YJb0unBNKL10VLfKuEkiACYJHxz841ocBrVrvTO+iGk5g9mh86G4rOzOnW+Nma+USZKTMjNd0MMACDGyFMOJjwTg4lBTKAjhUDwOf+Nhf+m4MUwxFDBdxkyABkogwwT9ocp9qhDocdt2OsbnPot4YzTuz+7T69b+9NS30LhGIgAKGNu+MnfoP+5Psx+/fyGbufASpf5FV42damCN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
                """
                icondata = base64.b64decode(icon)
                iconfile = open(f'{config_path}\\icon.ico', 'wb')
                iconfile.write(icondata)
                iconfile.close()
            if not os.path.isfile(f'{config_path}\\config.ini'):
                config.add_section('SYSTEM')
                config.add_section('TRACKER')
                config['SYSTEM']['base_save'] = f'{os.path.expanduser("~")}\\Saved Games\\Grounded'
                config['SYSTEM']['save_folder'] = '(ID-GAMENUMBER)(LOGOUT-SAVE)'
                config['SYSTEM']['user_name'] = 'None'
                config['TRACKER']['last_save'] = 'None'
                config['TRACKER']['last_user'] = 'None'
                config['TRACKER']['version'] = guu_version
                config['TRACKER']['firstuse'] = 'true'
                with open(f'{config_path}\\config.ini', 'w') as configfile:
                    config.write(configfile)
                config.read(f'{config_path}\\config.ini')
            else:
                config.read(f'{config_path}\\config.ini')
                folder_location = f'{config["SYSTEM"]["base_save"]}\\{config["SYSTEM"]["save_folder"]}'

            if config['TRACKER']['version'] != guu_version:
                config['TRACKER']['version'] = guu_version
                with open(f'{config_path}\\config.ini', 'w') as configfile:
                    config.write(configfile)
    check_and_create_system_files()

    appIcon = f'{config_path}\\icon.ico'
    
    window_padX = 10
    window_padY = 20

    #Create Window
    window = Tk()
    window.title('Guu File Sync')
    window.geometry('500x150')
    window.iconbitmap(appIcon)
    
    #Create Frame data for Save File
    load_save_location = Frame(window)
    load_save_location.pack()
    upload_download_location = Frame(window)
    upload_download_location.pack()
    footer_location = Frame(window)
    footer_location.pack()

    def browsefunc():
        nonlocal folder_location
        load_path_text.config(state=NORMAL)
        load_path_text.delete(1.0, END)
        folder_location = filedialog.askdirectory(initialdir=config['SYSTEM']['base_save'])
        load_path_text.insert(1.0, os.path.basename(folder_location))
        config['SYSTEM']['save_folder'] = os.path.basename(folder_location)
        load_path_text.see(INSERT)
        load_path_text.config(state=DISABLED)
        with open(f'{config_path}\\config.ini', 'w') as configfile:
            config.write(configfile)

    def sftp_util(state):
        cnopts = pysftp.CnOpts()
        cnopts.hostkeys = None
        with pysftp.Connection('gudx.dev', username='groundedsaves', password='2xyWsgV2tat&iZj3', cnopts=cnopts) as sftp:
            if state == 'upload':
                sftp.chdir('saves')
                sftp.put(f'{config_path}\\tmp\\latest.zip')
                sftp.chdir('backup')
                sftp.put(f'{config_path}\\tmp\\{config["SYSTEM"]["save_folder"]}.zip')
                sftp.chdir('../../.control')
                #Send who uploaded the file
                with open(f'{config_path}\\tmp\\last_user.txt', 'w') as f:
                    f.write(config['SYSTEM']['user_name'])
                sftp.put(f'{config_path}\\tmp\\last_user.txt')
                os.remove(f'{config_path}\\tmp\\last_user.txt')
                sftp.close()
                toaster.show_toast("Guu File Sync", "Save has been uploaded.",
                                   icon_path=appIcon, duration=10, threaded=True)
                upload.config(state=DISABLED)
            elif state == 'download':
                sftp.chdir('saves')
                sftp.get('latest.zip', f'{config_path}\\tmp\\latest.zip')
        

    def make_archive():
        def inner_func():
            destination = f'{config_path}\\tmp\\{config["SYSTEM"]["save_folder"]}.zip'
            base = os.path.basename(destination)
            archive_from = os.path.dirname(folder_location)
            archive_to = os.path.basename(folder_location.strip(os.sep))
            shutil.make_archive(base, 'zip', archive_from, archive_to)
            shutil.move('%s.%s' % (base, 'zip'), destination)
            shutil.copy(destination, f'{config_path}\\tmp\\latest.zip')
            sftp_util('upload')
        threading.Thread(target=inner_func, daemon=True).start()
        
    def download_archive():
        def inner_func():
            sftp_util('download')
            shutil.unpack_archive(f'{config_path}\\tmp\\latest.zip', config['SYSTEM']['base_save'])
            toaster.show_toast("Guu File Sync", "Save file sync'd to local system.", icon_path=appIcon, duration=10, threaded=True)
            download.config(state=DISABLED)
            upload.config(state=NORMAL)
        threading.Thread(target=inner_func, daemon=True).start()
    
    Label(load_save_location, text='Save Folder').place(x=6, y=5)
    load_path_text = Text(load_save_location, wrap="none", height=1, width=50)
    load_path_text.insert(1.0, config['SYSTEM']['save_folder'])
    load_path_text.config(state=DISABLED)
    load_path_text.grid(row=0, column=0, padx=window_padX, pady=window_padY)
    browsefolderbutton = Button(load_save_location, text="Browse", command=browsefunc)
    browsefolderbutton.grid(row=0, column=1, padx=window_padX, pady=window_padY)

    Label(load_save_location, text='Game Save Location').place(x=6, y=50)
    game_path_text = Text(load_save_location, wrap="none",height=1, width=50)
    game_path_text.insert(1.0, config['SYSTEM']['base_save'])
    game_path_text.config(state=DISABLED)
    game_path_text.grid(row=1, column=0, padx=window_padX)

    upload = Button(upload_download_location, text="Upload", command=make_archive, state=DISABLED)
    upload.grid(row=2, column=0, padx=window_padX, pady=window_padY)

    download = Button(upload_download_location, text="Download", command=download_archive, state=DISABLED)
    download.grid(row=2, column=1, padx=window_padX, pady=window_padY)

    Label(window, text=f'Version: {guu_version}').place(x=410, y=125)

    def setup_username():
        def setupname():
            config['SYSTEM']['user_name'] = entry.get()
            config['TRACKER']['firstuse'] = 'false'
            with open(f'{config_path}\\config.ini', 'w') as configfile:
                config.write(configfile)
            optionmenu.delete("Set Username")
            optionmenu.add_command(label="Reset", command=factory_reset)
            usernamewin.destroy()
        usernamewin = Toplevel(window)
        usernamewin.geometry("100x50")
        usernamewin.resizable(False, False)
        entry = Entry(usernamewin, width=15, textvariable=config['SYSTEM']['user_name'])
        entry.pack()
        submit = Button(usernamewin, text="Submit", command=setupname)
        submit.pack()

    def factory_reset():
        config['SYSTEM']['base_save'] = f'{os.path.expanduser("~")}\\Saved Games\\Grounded'
        config['SYSTEM']['save_folder'] = '(ID-GAMENUMBER)(LOGOUT-SAVE)'
        config['SYSTEM']['user_name'] = 'None'
        config['TRACKER']['last_save'] = 'None'
        config['TRACKER']['last_user'] = 'None'
        config['TRACKER']['version'] = guu_version
        config['TRACKER']['firstuse'] = 'true'
        with open(f'{config_path}\\config.ini', 'w') as configfile:
            config.write(configfile)
        optionmenu.delete("Reset")
        optionmenu.add_command(label="Set Username", command=setup_username)
        load_path_text.config(state=NORMAL)
        load_path_text.delete(1.0, END)
        load_path_text.insert(1.0, config['SYSTEM']['save_folder'])
        load_path_text.config(state=DISABLED)
        upload.config(state=DISABLED)
        
    def update_gfs():
        optionmenu.delete("Update")
        os.startfile('C:\\Program Files\\Notepad++\\notepad++.exe')

    menubar = Menu(window)
    optionmenu = Menu(menubar, tearoff=0)
    if config.getboolean('TRACKER', 'firstuse'):
        optionmenu.add_command(label="Set Username", command=setup_username)
    else:
        optionmenu.add_command(label="Reset", command=factory_reset)
    menubar.add_cascade(label="Options", menu=optionmenu)

    def quit_window(tray):
        tray.stop()
        window.destroy()

    # Define a function to show the window again
    def show_window(tray):
        tray.stop()
        window.after(0, window.deiconify)

    # Hide the window and show on the system taskbar
    def hide_window():
        nonlocal appIcon
        window.withdraw()
        menu = (item('Show', show_window), item('Upload', make_archive), item(
            'Download', download_archive), item('Quit', quit_window))
        tray = pystray.Icon("GFS", Image.open(appIcon), "Guu File Sync", menu)
        tray.run()

    window.protocol('WM_DELETE_WINDOW', hide_window)

    def process_corotine():
        showOnceSave = True
        showOnceVersion = True
        process_name = 'notepad++' #'Maine-Win64-Shipping'
        game_running = Label(window, text='Game running...')
        while True:
            if check_if_game_is_running(process_name):
                upload.config(state=DISABLED)
                download.config(state=DISABLED)
                game_running.place(x=405, y=110)
            else:
                game_running.place_forget()
                if config.getboolean('TRACKER', 'firstuse'):
                    download.config(state=NORMAL)
                    if config['SYSTEM']['user_name'] != 'None' and config['SYSTEM']['save_folder'] != '(ID-GAMENUMBER)(LOGOUT-SAVE)':
                        upload.config(state=NORMAL)
                else:
                    if check_for_new_save():
                        if showOnceSave:
                            toaster.show_toast("Guu File Sync", "A new save is ready for download.", icon_path=appIcon, duration=5)
                            download.config(state=NORMAL)
                            showOnceSave = False
                    else:
                        if config['SYSTEM']['user_name'] != 'None' and config['SYSTEM']['save_folder'] != '(ID-GAMENUMBER)(LOGOUT-SAVE)':
                            upload.config(state=NORMAL)
                            showOnceSave = True
                if check_for_new_version():
                    if showOnceVersion:
                        optionmenu.add_command(label="Update", command=update_gfs)
                        toaster.show_toast("Guu File Sync", "A new version of GFS is available.", icon_path=appIcon, duration=5)
                        showOnceVersion = False
                else:
                    showOnceVersion = True 
            
            time.sleep(5)
    threading.Thread(target=process_corotine, daemon=True).start()
    
    window.config(menu=menubar)
    window.resizable(False, False)
    window.mainloop()
